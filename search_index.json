[
["index.html", "A prevalence of tissue heterogeneity in gene expression data: Supplementary Information 1 BioQC GEO Analysis", " A prevalence of tissue heterogeneity in gene expression data: Supplementary Information Gregor Sturm, Jitao David Zhang 2018-07-29 1 BioQC GEO Analysis This document is supplementary information for Sturm, G and Zhang, JD. A prevalence of tissue heterogeneity in gene expression data. Manuscript in preparation. This document demonstrates step-by-step how we generated and validated tissue signatures, curated data and derive our results. The source code and instructions how to reproduce this study are available from GitHub: grst/bioqc_geo. "],
["validating-signatures.html", "2 Validating Tissue Signatures 2.1 Data 2.2 Cross-Validation of signatures on the GTEx dataset 2.3 ‘solid’ signatures 2.4 Cross-Platform Cross-Species validation", " 2 Validating Tissue Signatures The authors of BioQC have taken three independent approaches to show that their signatures are valid and biologically meaningful. (1) They checked the results for batch effects using surrogate variable analysis (SVR), (2) they ensured that the signatures are biologically meaningful by relating them to biological knowledge, and (3) used an independent method to derive the signatures, which yields comparable results. However, they did not break down the predictive performance (i.e. is the signature able to identify its tissue) of each signature with quantitative performance measures. However, they do not quantify the performance of the signatures using standardized performance measures, such as sensitivity and specificity. In principle, one can think of three methods to achieve such a validation (Gönen 2009): (1) internal validation, i.e. using the same data for generating and testing signatures, (2) split-sample validation, i.e. dividing the dataset in a test and training dataset and (3) independent-sample validation, i.e. using entirely unrelated samples for training and testing. While method (2) might be acceptable if sufficient data is unavailable, only method (3) can ensure that the signature does not reflect experimental biases. To address this, we independently derived signatures on the GTEx dataset using gini-index and performed both a 10-fold cross validation on the same dataset and a cross-species, cross-platform validation on the mouseGNF. To this end, we developed the python package pygenesig, a framework to create and validate signatures. In this chapter, we perform a 10-fold cross-validation on the GTEx dataset, calculating the precision and recall for each signature. perform a cross-species, cross-platform validation of the signatures generated on the GTEx dataset identify a set of tissues, that can be reliably and unabmigously identified with the BioQC method. 2.1 Data The Genotype Tissue Expression (GTEx) project is a comprehensive resource of tissue-specific gene expression data. We use this dataset to derive tissue-specific signatures. The data is human only and was generated using Illumina sequencing. We use the GNF Mouse GeneAtlas V3 as a control dataset to demonstrate that the gini-method is robust over multiple platforms and species. This dataset originates from mouse and was generated using the Affymetrix Mouse Genome 430 2.0 Array (GPL1261). 2.2 Cross-Validation of signatures on the GTEx dataset We use pygenesig-pipline to create and validate signatures on the GTEx v6 dataset. The data preparation steps are performed using these jupyter notebooks. The output of pygenesig-pipeline can be viewed here. Below, we summarize the prodecues described in these documents. We obtained the gene expression data and sample annotation from the GTEx portal. We collapsed gene expression data by HGNC symbol, aggregating by the sum. We performed a 10-fold cross-validation as follows: We split samples in 10 stratified folds, i.e. samples from all tissues are equally distributed across all folds. We use 9 folds to generate signatures using the gini method as described by the BioQC authors. These signatures were applied to the remaining fold using BioQC. We iterated over the folds such that each fold has been used for training and testing. The following heatmap shows the average BioQC score over all folds for each signature and each tissue. Figure 2.1: cross-validation of GTEx tissue signatures. Signatures are shown on the y-axis, the corresponding groups of samples on the x-axis. The tile shading indicates the average BioQC score of a signature on a group of samples. For better visibility of low scores, the colors are saturated at 30. As identifying contaminated/mislabled samples can be boiled down to a classification exercise, we are interested in the predictive performance of each signature. The following heatmap shows the confusion matrix of using the signatures for classification. A sample is considered as classified as a tissue, if the corresponding signature scores highest among all other signatures. Figure 2.2: Confusion matrix of the cross-validation. 2.3 ‘solid’ signatures From the above matrices we learn that, while the vast majority of signatures yield a high score in the corresponding tissue, an unambigous classification of tissues is only viable for a subset of tissues. For instance, the different brain regions are hard to distinguish and so are physiologically close tissues (e.g. large and small intestine). Here, we reduce the dataset to a subset of tissues, which can be unambigously distinguished using the BioQC method (i.e. precision = recall = 1.0). We manually map the tissues from GTEx to a reduced subset of tissue names. The data is prepared to be ran using pygenesig-pipeline. The results are available in this jupyter notebook and summarized below. Again, the following heatmap shows the confusion matrix. Figure 2.3: Confusion matrix of rosubst signatures. All tissues have been correctly identified at Precision = Recall = 1.0. 2.4 Cross-Platform Cross-Species validation Arguably, in the above experiment, we could have built signatures based on human-specific genes, genes that can only be detected by a certain experimental platform or even experiment-specific batch effects instead of univerally translatable marker genes. To asses the translatability of the signatures, we tested the signatures generated above (human, Illumina sequencing) on the mouseGNF tissue expression atlas (mouse, Affymetrix microarray). Te procedure is described in this notebook. The following figure shows the score matrix of GTEx signatures against mouseGNF samples: Figure 2.4: Cross-platform, cross-species validation of the robust signatures identified in the previous step. The signatures Brain, Heart, Kidney, Liver, Skeletal Muscle, Pancreas, Skin and Testis identify the respective tissue despite the species and platform differences at a high (&gt;5) BioQC score. As expected Heart and Skeletal muscle also identify each other, however Heart scores still higher on heart samples and Skeletal muscle scores higher on skeletal muscles samples, therefore we retain both signatures. Surprisingly, Adrenal Gland, Ovary and Uterus are not able to identify the respective samples, despite having a high score in the cross-validation. We therefore exclude these signatures from the ‘gtex solid’ signature set. Unfortunately, Blood was not profiled in the mouseGNF dataset. We keep the signature nonetheless as it does not trigger any false positives. References "],
["curating-data.html", "3 Curating Data 3.1 Selecting Samples by Metadata 3.2 Normalize Tissues 3.3 Map tissues to signatures", " 3 Curating Data In this chapter, we describe our efforts in manual data curation. 3.1 Selecting Samples by Metadata GEOmetadb is a SQLite database containing metadata associated with samples and studies from GEO. This database has proven to be tremendously helpful for selecting samples by tissue and organism. We integrate the database into the study’s DBS and describe how we select samples in detail in sample selection. 3.2 Normalize Tissues The annotation of tissues is inconsistent within GEO. A “liver” sample can be termed e.g. “liver”, “liver biopsy” or “primary liver”. We therefore need a way to normalize the tissue name. We therefore manually mapped the most abundant tissues to a controlled vocabulary in this Excel sheet. 3.3 Map tissues to signatures In order to find out which samples show tissue heterogeniety, we first need to define which signatures we would ‘expect’ in a certain tissue. We therefore manually mapped signatures to the respective tissue type in this Excel sheet. For example, we map the signatures Intestine_Colon_cecum_NR_0.7_3 and Intestine_Colon_NR_0.7_3 to colon. We mapped all normalized tissues from above to the respective signatures, which have at least 500 samples. We mapped tissues with a lower sample count only if they formed a subset of an already mapped tissue (e.g. we mapped prefrontal cortex to brain although having less than 500 samples, because we already mapped signatures to brain.) Moreover, we ran into the issue, that some tissue signatures are not as specific as the annotation in the GEO. We therefore curated so-called tissue sets to combine them into groups. For example, it is hard to distinguish jejunum from colon, but easy to distinguish the two from other tissues. We therefore created a tissue set intestine, which contains both jejunum and colon and references all signatures associated with the two tissues. This information is part of the same Excel sheet. We created a tissue set bioqc_all which maps all tissues to all signatures provided by the authors of BioQC and a high-confidence tissue-set gtex_solid which only maps tissues to signatures that we could validate as high-confidence signatures in Validate Tissue Signatures. "],
["setup-database.html", "4 Setup Database 4.1 Tables explained 4.2 Import GEOmetadb 4.3 Import BioQC data", " 4 Setup Database In this chapter, we describe * how we use an SQL database system (DBS) to hold all data relevant for the study * the design of the database * how we load the data into the DBS We store meta information for GEO samples and BioQC p-values in an Oracle 11g database. We combine the metadata from GEOmetadb with tables to store signature scores generated with BioQC and manually curated annotations. If you want to reproduce the database, have a look at the additional repository grst/Bioqc_GEO_Analysis. A dump of the database as csv files is available within the resources of this document, which can also be found on GitHub: grst/bioqc_geo The following figure shows the database scheme used for the study as entity-relationship (ER) diagram: Figure 2.2: Entitiy relationship diagram of the BioQC database scheme. Click the here for an enlarged version. Greenish tables are imported and adapted from GEOmetadb. Yellowish tables are additional tables designed for this study. Three dots (…) indicate columns from GEOmetadb which have been omitted in the visualisation because they are not relevant for this study. 4.1 Tables explained 4.1.1 GEOmetadb BIOQC_GSM: from GEOmetadb, meta information for all Samples in GEO BIOQC_GPL: from GEOmetadb, list of all Platforms (e.g. different types of microarrays) referenced in GEO. BIOQC_GSE: from GEOmetadb, list of Series (collections of samples) in GEO. BIOQC_GSE_GPL: from GEOmetadb, relation of Series and Platforms. Columns containing Series/Platform-specific gene expression statistics have been added which are used for a simple quality control. 4.1.2 BioQC BIOQC_TISSUES: List of all tissues manually annotated in Normalize Tissues. BIOQC_NORMALIZE_TISSUES: Stores the manually curated mapping of the original tissue name to a normalized tissue name. BIOQC_SIGNATURES: Stores gene signatures imported from a GMT file. BIOQC_TISSUE_SET: Stores the manually curated mapping of tissues to ‘expected signatures’. BIOQC_RES: Stores the p-value generated with BioQC for each signature in BIOQC_SIGNATURES and each samples in BIOQC_GSM. BIOQC_BIOQC_SUCCESS: List of all studies on which we successfully ran BioQC. This serves as ‘background’ for our analysis. 4.2 Import GEOmetadb First, we need to extract a list of tables: gdb = dbConnect(SQLite(), file.path(DATA_DIR, &quot;geometabase/GEOmetadb.sqlite&quot;)) tables = dbListTables(gdb) writeLines(tables, file(file.path(DATA_DIR, &quot;geometabase/tables.txt&quot;))) Then, we use a conversion script to export the SQL schema and the tables as csv, which can be easily imported into the Oracle DBS. We adjusted the GEOmetadb schema to match Oracle datatypes. Once the tables are imported, we check if all the tables have the same number of rows: # check for consistency for(table in tables) { count.query = sprintf(&quot;select count(*) from %s&quot;, table) count.query.ora = sprintf(&quot;select count(*) from bioqc_%s&quot;, table) print(count.query) expect_equal(dbGetQuery(gdb, count.query)[[1]], dbGetQuery(mydb, tolower(count.query.ora))[[1]]) } 4.2.1 Fix foreign key constraints Unfortunately, foreign key constraints are not enabled in the GEOmetadb SQLite database. It turned out that the GEOmetadb is not entirely consistent when trying to add such constraints in Oracle. We fixed missing parent keys by adding “stub” entries to the tables. The procedure is documented in this SQL script. 4.2.2 Extract Tissue annotation The tissue annotation for each sample is hidden in the characteristics_ch1 column of the BIOQC_GSM table. Since this information is essential for our study, we parsed it into a separate column using a regular expression. The procedure is documented in this SQL script. 4.2.3 Load annotation information To run BioQC, gene symbols need to be annotated in the gene expression matrix. To retrieve gene symbols, we are aware of two feasible possibilities: the Bioconductor annotation packages (listed in GEOmetadb gpl.bioc_package) use the GEO annot_gpl files (“in general available for all GSE that are referenced by a GDS”1) To find out for which GSE in particular the latter option exists, we parsed the directory structure of the GEO ftp server: lftp -c &quot;open ftp://ftp.ncbi.nlm.nih.gov/geo/platforms/ &amp;&amp; find &amp;&amp; exit&quot; &gt; gpl_annot_ftp_tree.txt grep annot.gz gpl_annot_ftp_tree.txt | cut -d&quot;/&quot; -f5 | cut -d&quot;.&quot; -f1 &gt; gpl_annot.txt We add this information the the BIOQC_GPL table as a boolean flag indicating whether the respective platform has an annotation file. # tmp table sql = &quot;create table bioqc_gpl_annot(gpl varchar2(10) primary key, has_annot number(1))&quot; dbSendUpdate(mydb, sql) annot = read.table(&quot;db/data/gpl_annot.txt&quot;) annot = cbind(annot, rep(1, length(annot))) colnames(annot) = c(&quot;1&quot;, &quot;2&quot;) dbAppendDf(&quot;BIOQC_GPL_ANNOT&quot;, annot) # update gpl from tmp table sqlUpdateGpl = &quot; update bioqc_gpl g set has_annot = (select has_annot from bioqc_gpl_annot a where g.gpl = a.gpl)&quot; dbSendUpdate(mydb, sqlUpdateGpl) # drop tmp table sql = &quot;drop table bioqc_gpl_annot&quot; dbSendUpdate(mydb, sql) We compared the two approaches in Sample Selection. 4.2.4 Import summary statistics for each study To perform a preliminary quality control on each study we calculated the min, max, median, mean and quartiles of the expression values of each study in GEO. This process is documented in test_for_normalization.R and the project’s Makefile. We import the results into the database: study_stats = data.table(read_tsv(file.path(DATA_DIR, &quot;gse_tissue_annot/study_stats.txt&quot;))) study_stats = study_stats[,GSE:=sapply(as.character(study_stats[[1]]), geoIdFromPath)] study_stats = study_stats[,GPL:=lapply(as.character(study_stats[[1]]), gplFromPath)] setcolorder(study_stats, c(8, 9, 1:7)) study_stats[, &#39;filename&#39;] = NULL # remove file name dbSendUpdate(mydb, &quot;truncate table bioqc_tmp_gse_gpl&quot;) dbAppendDf(&quot;BIOQC_TMP_GSE_GPL&quot;, study_stats) dbSendUpdate(mydb, &quot;update bioqc_gse_gpl a set (study_mean, study_min, study_25, study_median, study_75, study_max) = (select study_mean, study_min, study_25, study_median, study_75, study_max from bioqc_tmp_gse_gpl b where a.gse = b.gse and (a.gpl = b.gpl or b.gpl is NULL))&quot;) 4.3 Import BioQC data We install the BioQC schema using this SQL script. 4.3.1 Signatures Import signatures into the database and create a single, consolidated gmt file. # Signatures shipped with BioQC (updated version from 2016-12-08) # download.file(&quot;http://bioinfo.bas.roche.com:8080/apps/gsea/genesets/exp.tissuemark.bioqc.roche.symbols.gmt&quot;, # &quot;data/expr.tissuemark.affy.roche.symbols.gmt&quot;) gmt2db(file.path(DATA_DIR, &quot;expr.tissuemark.affy.roche.symbols.gmt&quot;)) # control signatures generated from GTEx using *pygenesig* gmt2db(&quot;../pygenesig-example/results/gtex_v6_gini_0.8_3/signatures.gmt&quot;, source=&#39;gtex_v6_gini.gmt&#39;) gmt2db(&quot;../pygenesig-example/results/gtex_v6_solid_gini_0.8_1/signatures.gmt&quot;, source=&#39;gtex_v6_gini_solid.gmt&#39;) # baseline signatures (random/housekeeping) gmt2db(&quot;../pygenesig-example/results/baseline_signatures.gmt&quot;) # pathway gene sets not relevant for this study # gmt2db(&quot;../BioQC_correlated-pathways/go.bp.roche.symbols.gmt.uniq&quot;) # gmt2db(&quot;../BioQC_correlated-pathways/MetaBase.downstream.expression.gmt&quot;) # gmt2db(&quot;../BioQC_correlated-pathways/path.ronet.roche.symbols.gmt.ascii&quot;) # save imported signatures to consolidated gmt file db2gmt(&quot;results/gmt_all.gmt&quot;) 4.3.2 Tissue Annotation Import the manually curated tissues from Excel into the database. normalized_tissues = data.table(read_excel(&quot;manual_annotation/tissue_annotation.xlsx&quot;, sheet = 1)) tissues = unique(normalized_tissues[!is.na(TISSUE_NORMALIZED),&quot;TISSUE_NORMALIZED&quot;, with=FALSE]) tab_normalized = normalized_tissues[!is.na(TISSUE_NORMALIZED),c(&quot;TISSUE&quot;, &quot;TISSUE_NORMALIZED&quot;), with=FALSE] dbAppendDf(&quot;BIOQC_TISSUES&quot;, tissues) dbAppendDf(&quot;BIOQC_NORMALIZE_TISSUES&quot;, tab_normalized) 4.3.3 Tissue Sets Import the manually curated tissue sets from Excel into the database. bioqc_all = read_excel(&quot;manual_annotation/tissue_annotation.xlsx&quot;, sheet = 3) gtex_all = read_excel(&quot;manual_annotation/tissue_annotation.xlsx&quot;, sheet = 4) gtex_solid = read_excel(&quot;manual_annotation/tissue_annotation.xlsx&quot;, sheet = 5) bioqc_solid = read_excel(&quot;manual_annotation/tissue_annotation.xlsx&quot;, sheet = 6) signatureset2db(bioqc_all, &quot;bioqc_all&quot;) signatureset2db(gtex_solid, &quot;gtex_solid&quot;) signatureset2db(gtex_all, &quot;gtex_all&quot;) signatureset2db(bioqc_solid, &quot;bioqc_solid&quot;) 4.3.4 BioQC results Once we ran the analysis, we manually import the list of samples on which we successfully applied BioQC and the respective p-values into the tables BIOQC_BIOQC_SUCCESS and BIOQC_RES: bioqc_melt_all.uniq.tsv bioqc_success.txt https://bioconductor.org/packages/release/bioc/manuals/GEOquery/man/GEOquery.pdf↩ "],
["sample-selection.html", "5 Sample Selection and processing 5.1 Sample Preselection 5.2 Sample Processing with BioQC 5.3 Sample Post-selection 5.4 ARCHS4 RNA-seq data", " 5 Sample Selection and processing In this chapter, we document how we obtain samples from the Gene Expression Omnibus (GEO) we filter the samples according the the availability of attributes and certain quality criteria. 5.1 Sample Preselection Here, we document the sample selection process before running BioQC. 5.1.1 Required annotation A sample is usable for this study, if the gene symbos are annotated (requirement to run BioQC) the tissue of origin is annotated (requirment to draw conclusions about contamination) We consider two approaches for annotating gene symbols: Using the Bioconductor AnnotationDbi package. The GEOmetadb provides a mapping of the GPL identifier to these packages. Using the annotGPL=TRUE option of GEOquery’s getGEO. This requires an annotation file being available for the respective platform. We retrieved a list of the available annotation files in an earlier step. We compare the two methods with respect to the amount of usable samples that we can get. We create the ‘annotation statistics’ using an sql script and calculate these Venn diagrams: Figure 5.1: Venn diagrams comparing two different approaches for annotating gene symbols. The left and right diagram show the numbers of samples (GSM) and studies (GSE) respectively. The getGEO method appears to be the more powerful method. Ideal would be a combination of the two, however, for the sake of simplicity, we stick to getGEO, loosing 499 studies (35602 samples). This leaves us with the following filtering result: comment GSM GSE total 1945417 73719 tissue annotated 760798 24267 annotation file available 768346 31579 tissue and annotation file 275206 9632 5.2 Sample Processing with BioQC The following processes are ressource intensive, therefore we execute them on a high performance cluster (HPC). We use chunksub to distribute the list of sample ids to the workers. This involves four major steps which are also documented in the project’s Makefile. We download the studies with GEOquery and store them as R ExpressionSet using the R script geo_to_eset.R. For some series, the download is not successful. We annotated human orthologous genes for all studies using ribiosAnnotation in annotate_eset.R. This is necessary as the tissue signatures are built on a human dataset. The annotation failes for species which are not in the ribios database. We run BioQC on these studies use run_bioqc.R. Finally, import the BioQC results into the database. 5.3 Sample Post-selection The failures during download and annotation reduce the number of samples available to our study. count_gse_gsm = function(tbl) { summarise(tbl, GSM=n_distinct(GSM), GSE=n_distinct(GSE)) } tmp_tbl = bioqc_bioqc_success %&gt;% inner_join(bioqc_gsm, by=c(&quot;GSM&quot;=&quot;GSM&quot;)) %&gt;% inner_join(bioqc_gse_gsm, by=c(&quot;GSM&quot;=&quot;GSM&quot;)) tmp_tbl %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 253210 8083 5.3.1 Excluding multi-channel microarrays Multi channel microarrays date back to the early age of gene expression studies. They don’t provide absolute gene expression data and are not meaningful outside their experimental context. We therefore exclude these experiments: tmp_tbl2 = tmp_tbl %&gt;% filter(CHANNEL_COUNT == 1) tmp_tbl2 %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 235237 7561 5.3.2 Exclude non-mapped tissues We exclude samples that have a tissue annotated, but it is not mapped to a normalized tissue. tmp_tbl3 = tmp_tbl2 %&gt;% mutate(TISSUE_ORIG=tolower(TISSUE_ORIG)) %&gt;% inner_join(bioqc_normalize_tissues, by=c(&quot;TISSUE_ORIG&quot;=&quot;TISSUE_ORIG&quot;)) tmp_tbl3 %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 136230 3800 5.3.3 Select organisms We were interested in the organism distribution. tmp_tbl3 %&gt;% group_by(ORGANISM_CH1) %&gt;% count_gse_gsm() %&gt;% arrange(-GSM) %&gt;% kable() ORGANISM_CH1 GSM GSE Homo sapiens 66316 1228 Mus musculus 38109 2270 Rattus norvegicus 29909 278 Macaca mulatta 1082 24 Macaca fascicularis 259 7 Mus musculus musculus x M. m. domesticus 202 2 Cercocebus atys 80 2 Oryctolagus cuniculus 57 1 Chlorocebus aethiops 36 1 Mus musculus domesticus 32 3 Pan troglodytes 25 1 Papio cynocephalus 23 1 Mus spretus 19 1 Capra hircus 18 1 Phodopus sungorus 16 1 Mus musculus musculus x M. m. castaneus 12 1 Papio hamadryas 12 1 Macaca nemestrina 8 1 Mus musculus castaneus 6 1 Mus musculus musculus 6 1 Mus sp. 3 1 Results suggest that it makes sense to limit the analysis to the three main organisms: H. sapiens, M. musculus, R. norvegicus. This makes also sense as these species are closesly related and therefore the signatures are more likely to translate within these species. We are left with the following amount of samples: tmp_tbl5 = tmp_tbl3 %&gt;% filter(ORGANISM_CH1 %in% c(&#39;Homo sapiens&#39;, &#39;Mus musculus&#39;, &#39;Rattus norvegicus&#39;)) tmp_tbl5 %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 134334 3757 5.3.4 Quality control In this step we seek to identify studies on which BioQC cannot work due to poor data quality or data processing steps that remove the relative expression of a gene within a sample, e.g. per-gene normalization. We will first filter samples by applying a cutoff-value to statistics on the gene expression data. Second, we will use an ubiquitous signature containing housekeeping genes as an indicator if BioQC returns a sensible result on the given sample. On each study, we have calculated the mean of each gene over all samples. Of this series of means, we calculate the IQR. If a per-gene normalization has been applied, this value should be close to zero. This histogram shows a distribution of all IQRs over all remaining studies: tbl_hist = tmp_tbl5 %&gt;% inner_join(bioqc_gse_gpl, by=c(&quot;GSE&quot;=&quot;GSE&quot;, &quot;GPL&quot;=&quot;GPL&quot;)) %&gt;% mutate(IQR=abs(STUDY_75-STUDY_25)) sm = tbl_hist$IQR hist(sm[sm &gt; 0 &amp; sm &lt; 25], breaks=seq(0, 25, .25), main=&quot;Variance between gene for each study (IQR)&quot;, xlab=&quot;median gene expression (only values up to 25)&quot;) abline(v=.5, col=&quot;blue&quot;) minor.tick(nx=5) (#fig:study_iqr)Histogram of the distribution of all inter quartile ranges of all studies remaining at this filtering step. The vertical line shows the filtering cutoff used. We exclude all studies having a very low variance between genes (IQR &lt; 0.5). Remaining samples: tmp_tbl6 = tbl_hist %&gt;% filter(IQR &gt;= .5) tmp_tbl6 %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 94790 3128 Now, we have a look at the p-value distribution of the signature we called awesome_housekeepers containing ubiquitous genes. The gene expression of these genes can be assumed to be more or less constant over all tissue types, therefore this signature should score high in every sample. Awesome Housekeepers tmp_bioqc_res = bioqc_signatures %&gt;% filter(ID %in% c(56184, 56206)) %&gt;% # awesome_housekeepers, random_100_0 inner_join(bioqc_res, by=c(&quot;ID&quot;=&quot;SIGNATURE&quot;)) %&gt;% rename(SIGNATURE=ID) tbl_hk = tmp_tbl6 %&gt;% inner_join(tmp_bioqc_res, by=c(&quot;GSM&quot;=&quot;GSM&quot;)) %&gt;% mutate(SCORE=absLog10p(as.numeric(PVALUE))) Figure 2.2: The orange curve is the pvalue distribution of the housekeeping signature. The blue curve shows the distribution of a random control signature containing 100 randomly chosen genes. The vertical line represents the p-value cutoff used in this filtering step We exclude all samples for which awesome_housekeepers scores with &lt; 5, i.e. pvalue &gt;= 1e-5. tmp_tbl7 = tbl_hk %&gt;% filter(SIGNATURE == 56184) %&gt;% filter(PVALUE &lt; 1e-5) tmp_tbl7 %&gt;% count_gse_gsm() %&gt;% kable() GSM GSE 81207 2925 This is the ‘background’ of samples on which we test for tissue contamination. We store the selected samples alongside with meta information required for the analysis in the materialized view BIOQC_SELECTED_SAMPLES in our DBS. Here is the SQL script generating the materialized view. 5.3.5 Tissue abundance The following table shows how many samples are available for each tissue: bioqc_selected_samples %&gt;% group_by(TISSUE) %&gt;% summarise(samples=n_distinct(GSM)) %&gt;% arrange(-samples) %&gt;% kable() TISSUE samples blood 18064 liver 12925 lung 7586 bone marrow 3911 kidney 3540 breast tumor 3465 brain 3452 heart 2402 spleen 2302 adipose 2214 skin 1927 skeletal muscle 1830 hippocampus 1573 colon 1463 lymph node 1120 cerebellum 1094 hepatocyte 1094 tumor 1036 breast 795 frontal cortex 729 placenta 678 pbmc 665 white blood cells 664 testis 627 retina 596 pancreas 586 thymus 551 pancreatic islets 488 ovary 455 mammary gland 395 jejunum 380 prostate 330 hypothalamus 271 cortex 256 prefrontal cortex 249 synovial tissue 234 uterus 232 embryo 217 monocyte 162 stomach 127 bladder 123 cervix 95 ventral midbrain 74 eye 69 salivary gland 48 neuroblastoma 45 adrenal gland 39 fibroblast 21 synovial fibroblast 8 5.4 ARCHS4 RNA-seq data In addition to GEO, we used data from ARCHS4, a publicly available data collection of annotaed, consistently processed gene expression datasets based on RNA-sequencing. We downloaded all human and mouse RNA-sequencing-based gene expression studies that are available on SRA in which Illumina GA 2000 were used to sequence from website of the ARCHS4 project (version 1.0). We filtered samples by the following criteria: (1) transcriptomic cDNA library, (2) library strategy is RNA-seq, (3) either polyA or total RNA were extracted, and (4) no less than 200,000 reads can be mapped to genes (or human orthologues in case of mouse samples) with valid Entrez Gene ID. The filter removed less than 10% of samples in either species (before/ after filtering: N=65429/ N=61455 for human, and N=72363/ N=65392 for mouse) The samples were processed in the same way as microarray studies from GEO (see 5.2). Gene counts were normalised into FPKM values that were analysed by BioQC. Results were independently analysed using the same software pipeline in which the microarray data were processed. Reference tissues annotated by studies’ authors were compared with the predictions of BioQC. "],
["testing-for-tissue-heterogeneity.html", "6 Testing for tissue heterogeneity 6.1 Tissue signatures 6.2 Data 6.3 Testing samples for heterogeneity", " 6 Testing for tissue heterogeneity 6.1 Tissue signatures In section 2, we identified a set of 9 reference signatures (table 6.1) which unambiguously identify their corresponding tissue across platforms and species. Table 6.1: reference signatures Reference Signature Tissue GTEX_Blood blood GTEX_Brain brain GTEX_Heart heart GTEX_Kidney kidney GTEX_Liver liver GTEX_Pancreas pancreas GTEX_Muscle_Skeletal skeletal muscle GTEX_Skin skin GTEX_Testis testis 6.2 Data In section 5 we show in detail, how we obtain and filter data from the Gene Expression Omnibus. Table 6.2 shows a summary of this process, listing the remaining samples and studies after each filtering step. Table 6.2: Selecting samples from GEO filtering step samples studies total (as of 2016-12-07) 1945417 73719 tissue annotated 760798 24267 gene symbols annotated 275206 9632 human orthologous gene symbols 253210 8083 Single-channel microarray 235237 7561 tissue mapped to controlled vocabulary 136230 3800 human, rat, mouse 134334 3757 minimal inter-sample variance 96074 3129 housekeeping signatures 81845 2926 reference signature available 51948 1760 6.3 Testing samples for heterogeneity We tested for enrichment of 97 selected signatures provided by BioQC, the 9 reference signatures generated by us and one random control signature of 100 randomly drawn genes on all 51948 selected samples resulting in a list of 5610384 (sample, signature, pvalue) pairs. This process is described in detail in section 5.2. Our intention is to identify samples that show tissue heterogeneity, i.e. unintentional profiling of cells of other origin than the target tissue of profiling. We classify samples as not heterogenous or heterogenous. We call a classification true-positive if the given sample is classified as heterogenous and the sample indeed contains cells different from the annotated tissues. Analogous, we call a classification false-positive if the given sample is classified as heterogenous but in reality only contains cells from the annotated tissue. Naively, we would label a sample as heterogenous, if a signature unrelated to the annotated tissue exceeds a certain score. The problem with this approach is, that some signatures overlap; the resulting scores are therefore correlated and will lead to false-positives. One cannot simply solve this problem by excuding genes that are members of multiple signatures, as it is easily possible to build two (in fact many) distinct, non-overlapping signatures matching the same tissue. In section 2 we haven created toroughly validated reference signatures for 9 tissues. Even though we have demonstrated that each signature unambigously identifies its corresponding tissue (i.e. scores highest), the signatures could still be correlated. Some of them in fact are, e.g. cardiac muscle and skeletal muscle (see figure 6.1). Moreover, we lack sufficient data to perform an independent-sample validation on the signatures provided by BioQC. Accounting for correlation with the reference signatures, we can still avoid false-positives, even if a signature is characteristic for a tissue histologically close to the annotated tissue. We therefore take the following approach to account for the correlation of signatures: A given sample \\(s\\) annotated as tissue \\(t\\) is tested for enrichment with signature \\(k_{\\text{test}}\\) resulting in a p-value \\(p_{\\text{test}}\\). Let \\(k_{\\text{ref}}\\) be the reference signature associated with tissue \\(t\\) and \\(p_{\\text{ref}}\\) the p-value of testing \\(s\\) for enrichment of \\(k_{\\text{ref}}\\). If the Benjamini-Hochberg-adjusted \\(p_{\\text{test}} &gt;= 0.01\\), we assume that \\(s\\) is not heterogenous; else continue. We fit a linear model using rlm from the R MASS package of \\(|log10(p_{\\text{test}})|\\) against \\(|log10(p_{\\text{ref}})|\\) for all samples annotated as \\(t\\). We assume that the residuals \\(R\\) of the linear model follow a normal distribution \\(R \\sim \\mathcal{N}(0, \\sigma^2)\\), where \\(\\sigma\\) is the standard deviation of the residuals. We extract the residual \\(r\\) corresponding to sample \\(s\\). We calculate the p-value \\(p_{\\text{corr}} = 1 - \\text{CDF}_R(r)\\) where \\(\\text{CDF}_R\\) is the cumulative density function of \\(\\mathcal{N}(0, \\sigma^2)\\). If the Bonferroni-adjusted \\(p_{\\text{corr}} &lt; 0.01\\), we reject the hypothesis that \\(k_{\\text{test}}\\) is enriched only due to correlation and label the sample as heterogenous. Figure 6.1: Examples of signature correlation. Panels A-C: correlation of the signature scores (y-axis) against the scores of a reference signature (x-axis). The purple line indicates the model fitted to the data, the shaded area the 3*sigma confidence interval. Points are colored according to whether they would be discarded already in the FDR-filtering step. (A) Brain scores of kidney samples against the scores of the kidney signature. There is virtually no correlation, nor are there outliers. Appraently, no kidney samples are contaminated with neuronal cells. (B) Liver scores of kidney samples against scores of the kidney signature. The samples are not correlated, however some outliers are detected which are samples potentially containing liver cells. (C) Cardiac muscle scores of skeletal muscle samples against skeletal muscle scores. The scores are highly correlated. While most of the poinst exceed the FDR threshold, they will not be classified as outliers because the elevated score can be explained with the correlation. Panels D and E show the boxplots of the scores of various signatures on kidney and heart samples respectively. "],
["results.html", "7 Results", " 7 Results Results suggest, that between 2 and 6 percent of all samples in GEO show tissue heterogeneity. A major source of heterogeneity appear to be blood mononuclear cells. Figure 7.1 shows the number of samples detected as heterogenous with the reference signatures only. Figure 7.2 shows the number of samples classified as heterogeneous with the signatures provided by BioQC. Figure 7.3 shows the fraction of heterogenous samples per tissue, taking all signatures into account. Figure 7.1: Tissue heterogeneity assessed with the reference signatures. The annotated tissues are listed in rows, the significantly enriched signatures in columns. If a signature has been found to be significantly enriched in a sample, the sample will count towards the number indicated in the matrix. All contaminations per sample are included, i.e. a sample can appear multiple times in a row. Figure 7.2: Tissue heterogeneity assessed with the BioQC signatures. The annotated tissues are listed in rows, the significantly enriched signatures in columns. If a signature has been found to be significantly enriched in a sample, the sample will count towards the number indicated in the matrix. All contaminations per sample are included, i.e. a sample can appear multiple times in a row. Figure 7.3: Fraction of heterogenous samples per tissue. Heterogeneity has been assessed using both the reference signatures and the signatures from BioQC. A sample only counts once to the fraction, even if multiple signatures are found to be enriched. "],
["redo-analysis-for-archs4.html", "8 Redo analysis for ARCHS4 8.1 Quick plots to check if everything is ok 8.2 Sample count by tissue 8.3 same analysis…", " 8 Redo analysis for ARCHS4 8.1 Quick plots to check if everything is ok ref_data = data2 %&gt;% inner_join(select(reference_signatures, &quot;REF_SIG&quot;), by=c(&quot;SIGNATURE&quot;=&quot;REF_SIG&quot;)) ggplot(ref_data, aes(x=SIGNATURE, y=score)) + geom_boxplot() + facet_wrap(~TGROUP) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ref_data %&gt;% filter(TGROUP == &quot;blood&quot;, SIGNATURE == &#39;GTEX_Blood&#39;) %&gt;% ggplot(aes(x=score)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ref_data %&gt;% ggplot(aes(x=ref_score, y=score)) + geom_point() + facet_grid(REF_SIG ~ SIGNATURE, scales=&quot;free&quot;) 8.2 Sample count by tissue data2 %&gt;% select(GSM, TGROUP) %&gt;% group_by(TGROUP) %&gt;% summarise(count = n_distinct(GSM)) ## # A tibble: 9 x 2 ## TGROUP count ## &lt;chr&gt; &lt;int&gt; ## 1 blood 1394 ## 2 brain 1387 ## 3 heart 413 ## 4 kidney 143 ## 5 liver 2378 ## 6 pancreas 161 ## 7 skeletal muscle 287 ## 8 skin 636 ## 9 testis 117 8.3 same analysis… Figure 8.1: Tissue heterogeneity assessed with the reference signatures. The annotated tissues are listed in rows, the significantly enriched signatures in columns. If a signature has been found to be significantly enriched in a sample, the sample will count towards the number indicated in the matrix. All contaminations per sample are included, i.e. a sample can appear multiple times in a row. Figure 8.2: Tissue heterogeneity assessed with the BioQC signatures. The annotated tissues are listed in rows, the significantly enriched signatures in columns. If a signature has been found to be significantly enriched in a sample, the sample will count towards the number indicated in the matrix. All contaminations per sample are included, i.e. a sample can appear multiple times in a row. Figure 7.3: Fraction of heterogenous samples per tissue. Heterogeneity has been assessed using both the reference signatures and the signatures from BioQC. A sample only counts once to the fraction, even if multiple signatures are found to be enriched. library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(stringr) library(readr) source(&quot;../scripts/config.R&quot;) library(cowplot) ## Loading required package: ggplot2 ## ## Attaching package: &#39;cowplot&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## ggsave "],
["figures-for-publication.html", "9 Figures for publication 9.1 Contamination heatmaps", " 9 Figures for publication 9.1 Contamination heatmaps load(&#39;../results/data_processed.RData&#39;) load(&#39;../results/models.RData&#39;) contam_count_array = data_corr %&gt;% filter(pcorr_adj &lt; P_THRES) %&gt;% group_by(TGROUP, SIGNATURE) %&gt;% summarise(cnt = n_distinct(GSM)) data_corr_array = data_corr load(&#39;../results/archs4/archs4_data_processed.RData&#39;) load(&#39;../results/archs4/archs4_models.RData&#39;) contam_count_ngs = data_corr %&gt;% filter(pcorr_adj &lt; P_THRES) %&gt;% group_by(TGROUP, SIGNATURE) %&gt;% summarise(cnt = n_distinct(GSM)) data_corr_ngs = data_corr same as in the section before, but all bioqc signatures aggregated by tissue groups. bioqc_tissue_set = read_csv(&quot;../data/bioqc_geo_oracle_dump/BIOQC_TISSUE_SET_DATA_TABLE.csv&quot;) %&gt;% filter(TISSUE_SET == &#39;bioqc_all&#39;) %&gt;% select(SIG_ID=SIGNATURE, DETECTED_TGROUP=TGROUP) ## Parsed with column specification: ## cols( ## SIGNATURE = col_integer(), ## TISSUE = col_character(), ## TGROUP = col_character(), ## TISSUE_SET = col_character() ## ) bioqc_all = selected_signatures %&gt;% filter(str_detect(SIGNATURE, &#39;BIOQC&#39;)) %&gt;% pull(&quot;SIGNATURE&quot;) contam_count_ngs_tgroup = data_corr_ngs %&gt;% inner_join(bioqc_signatures, by=c(&quot;SIGNATURE&quot;=&quot;SIG_NAME&quot;)) %&gt;% rename(SIG_ID=ID) %&gt;% inner_join(bioqc_tissue_set) %&gt;% filter(pcorr_adj &lt; P_THRES) %&gt;% group_by(TGROUP, DETECTED_TGROUP) %&gt;% summarise(cnt = n_distinct(GSM)) ## Joining, by = &quot;SIG_ID&quot; contam_count_array_tgroup = data_corr_array %&gt;% inner_join(bioqc_signatures, by=c(&quot;SIGNATURE&quot;=&quot;SIG_NAME&quot;)) %&gt;% rename(SIG_ID=ID) %&gt;% inner_join(bioqc_tissue_set) %&gt;% filter(pcorr_adj &lt; P_THRES) %&gt;% group_by(TGROUP, DETECTED_TGROUP) %&gt;% summarise(cnt = n_distinct(GSM)) ## Joining, by = &quot;SIG_ID&quot; tgroups = bioqc_tissue_set$DETECTED_TGROUP %&gt;% unique() contam_count_ngs_tgroup %&gt;% ggplot(aes(x=factor(DETECTED_TGROUP, levels=tgroups), y=TGROUP)) + geom_tile(aes(fill = cnt &gt; 0)) + geom_text(aes(label=cnt)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(drop=FALSE) + ylab(&quot;reference tissue&quot;) + xlab(&quot;detected signature&quot;) + background_grid() + scale_fill_manual(values=c(&quot;#ececff&quot;)) tgroups = bioqc_tissue_set$DETECTED_TGROUP %&gt;% unique() contam_count_array_tgroup %&gt;% ggplot(aes(x=factor(DETECTED_TGROUP, levels=tgroups), y=TGROUP)) + geom_tile(aes(fill = cnt &gt; 0)) + geom_text(aes(label=cnt)) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(drop=FALSE) + ylab(&quot;reference tissue&quot;) + xlab(&quot;detected signature&quot;) + background_grid() + scale_fill_manual(values=c(&quot;#ececff&quot;)) "]
]
